pipeline {
    agent any
    environment {
        APP_NAME="car-rental"
        APP_STACK_NAME="$APP_NAME-App-ver-${BUILD_NUMBER}"
        AWS_REGION="us-east-1"
        CFN_KEY="brc-cfn"
        CFN_TEMPLATE="./Infrastructure/cfn-template.yaml"
        ANSIBLE_PRIVATE_KEY_FILE="${JENKINS_HOME}/.ssh/${CFN_KEY}"
        ANSIBLE_HOST_KEY_CHECKING="False"
    }
    stages {
        stage('Create Infrastructure') {
            steps {
                echo 'Creating Infrastructure for Automation Environment with Cloudfomation'
                sh "aws cloudformation deploy --template-file ./Infrastructure/cfn-template.yaml --stack-name ${APP_STACK_NAME} --parameter-overrides KeyPairName=${CFN_KEY} --capabilities CAPABILITY_IAM"
                
            }
        }

        stage('Create Docker Swarm  Environment') {
            steps {

                echo "Setup Docker Swarm for  Automation Build for ${APP_NAME} App"
                echo "Update dynamic environment"
                sh "sed -i 's/APP_STACK_NAME/${APP_STACK_NAME}/' ./ansible/inventory/dynamic_inventory_aws_ec2.yaml"
                echo "Swarm Setup for all nodes (instances)"
                sh "ansible-playbook -i ./ansible/inventory/dynamic_inventory_aws_ec2.yaml -b ./ansible/playbooks/setup_for_all.yaml"
                echo "Swarm Setup for Grand Master node"
                sh "ansible-playbook -i ./ansible/inventory/dynamic_inventory_aws_ec2.yaml -b ./ansible/playbooks/initialize_cluster.yaml"
                echo "Swarm Setup for Other Managers nodes"
                sh "ansible-playbook -i ./ansible/inventory/dynamic_inventory_aws_ec2.yaml -b ./ansible/playbooks/manager_join.yaml"
                echo "Swarm Setup for Workers nodes"
                sh "ansible-playbook -i ./ansible/inventory/dynamic_inventory_aws_ec2.yaml -b ./ansible/playbooks/worker_join.yaml"
            }
        }
    }
    post {
        failure {
            echo 'Tear down the Docker Swarm infrastructure using AWS CLI'
            sh "aws cloudformation delete-stack --region ${AWS_REGION} --stack-name ${APP_STACK_NAME}"
        }
    }
}
